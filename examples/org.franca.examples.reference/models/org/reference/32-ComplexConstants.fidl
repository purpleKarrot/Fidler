/*******************************************************************************
 * Copyright (c) 2013 itemis AG (http://www.itemis.de).
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.reference

typeCollection MyTypeCollection32 {
	
	// type definitions
	
	enumeration E1 {
		Enum1 Enum2 Enum3
	}
	
	enumeration E2 extends E1 {
		Enum4 = 10
		Enum5 = x
		Enum6 = str3.e1 + x
	}
	
	array A1 of UInt16
	array A2 of E2
	array A3 of A1
	array A4 of S1

	struct S1 {
		Boolean e1
		UInt16 e2
		String e3
	}
	
	struct S2 {
		UInt8 e1
		S1 e2
		Boolean e3
		S1 e4
	}

	struct S3 extends S2 {
		String e5
	}

	struct S4 extends S3 {
		E1 e6
	}
	
	struct S5 {
		M1 e1
		A1 e2
	}
	
	union U1 {
		UInt16 e1
		Boolean e2
		String e3
	}
	
	union U2 extends U1 { }
	union U3 extends U2 {
		S1 e5
	}

	map M1 { UInt16 to String }
	map M2 { UInt16 to A1 }
	map M3 { A1 to Boolean }
	map M4 { UInt16 to S1 }


	// constant definitions using the above types

	// enumeration constants
	const E1 e1 = E1.Enum1
	const E1 e2 = e1
	const E2 e3 = E1.Enum1
	const E2 e4 = E2.Enum4
	const E1 e5 = E2.Enum3 // E2.Enum3 is actually a E1.Enum3

	// array constants
	const A1 a0 = []
	const A1 a1 = [ 1, 2, 2+3, 100*100+100 ]
	const A2 a2 = [ E1.Enum1, E1.Enum2, E2.Enum1, E2.Enum4, e1, e2, e3, e4 ]
	const A3 a3 = [
		[ 1, 2 ],
		[ 3, 4, 5 ],
		[ 0 ]
	]
	const A4 a4 = [
		{ e1 : true, e2 : 1, e3 : "foo" },
		{ e1 : false, e2 : 1, e3 : "foo" },
		str1,
		str3.e4
	]

	// struct constants
	const UInt16 x = 123
	const S1 str1 = { e1 : true, e2 : 1, e3 : "foo" }
	const S2 str2 = {
		e1 : 1,
		e2 : { e1 : 47<11, e2 : x+1, e3 : str1.e3 },
		e3 : false,
		e4 : str1
	}
	const S4 str3 = {
		e1 : 5,
		e2 : str1,
		e3 : false,
		e4 : str1,
		e5 : "bar",
		e6 : E1.Enum2
	}
	const S3 str4 = str3 // initialize from sub-struct instance 
	const S2 str5 = str3 // initialize from sub-sub-struct instance 
	const S5 str6 = {
		e1 : [ 1 => "foo", 2 => "bar" ],
		e2 : [ 1, 2, 3 ]
	}
	 
	// union constants
	const U1 uni1 = { e1 : 1 }
	const U1 uni2 = { e2 : 1!=2 }
	const U1 uni3 = { e3 : str3.e5 }
	const U2 uni4 = { e2 : false}
	const U3 uni5 = { e5 : { e1 : uni2.e2,  e2 : 1, e3 : "foo" } }

	// map constants
	const M1 m0 = [ ]
	const M1 m1 = [ 1 => "one", 2 => "two" ]
	const M2 m2 = [ 1 => [], 2 => [47, 11] ]
	const M3 m3 = [ [] => true, [1, 2, 3] => false ]
	const M4 m4 = [ 3 => str1, 5 => { e1 : true, e2 : 1, e3 : "foo" } ]

}
