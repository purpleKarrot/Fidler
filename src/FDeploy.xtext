/*******************************************************************************
* Copyright (c) 2012 Harman International (http://www.harman.com).
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* 2012-03-06: Klaus Birken (initial version)
*******************************************************************************/
grammar org.franca.deploymodel.dsl.FDeploy with org.eclipse.xtext.common.Terminals

generate fDeploy "http://www.franca.org/deploymodel/dsl/FDeploy"

// the Franca IDL ecore model
import "http://core.franca.org" as fidl

// the Ecore ecore model
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


// **************************************************************
// model root

FDModel:
	(imports+=Import)*
	(specifications+=FDSpecification)*
	(deployments+=FDRootElement)*
	;

Import :
	'import' (importURI=STRING|importedSpec=FQN);
	

// **************************************************************
// property definition (meta part)

FDSpecification:
	'specification' name=FQN ('extends' base=[FDSpecification|FQN])? '{'
		(declarations+=FDDeclaration)*
	'}';

FDDeclaration: 
	'for' host=FDPropertyHost '{'
		properties+=FDPropertyDecl*
	'}';

FDPropertyDecl:
	name=ID ':' type=FDTypeRef
		('(' flags+=FDPropertyFlag (',' flags+=FDPropertyFlag)* ')')?
	';' ;

FDPropertyFlag:
	optional='optional' |
	'default:' default=FDComplexValue;


enum FDPropertyHost:
	providers | instances |
	type_collections | interfaces |
	attributes | methods | broadcasts |
	arguments |
	struct_fields | union_fields | arrays | structs | unions |
	enumerations | enumerators |
	strings | numbers | integers | floats;


// **************************************************************
// deployment model type system

FDTypeRef:
	(predefined=FDPredefinedTypeId | complex=FDType) (array='[]')?;

enum FDPredefinedTypeId:
	Integer | String | Boolean | Interface;

FDType:
	FDEnumType;

FDEnumType:
	'{' enumerators+=FDEnumerator (',' enumerators+=FDEnumerator)* '}';

FDEnumerator:
	name=ID;


// **************************************************************
// content definition (model part)

FDRootElement:
	FDProvider | FDTypes | FDInterface;

FDElement:
	FDRootElement | FDInterfaceInstance |
	FDAttribute | FDMethod | FDBroadcast | FDArgument |
	FDTypeDef | FDField | FDEnumeration | FDEnumValue;

FDProvider:
	'define' spec=[FDSpecification|FQN]
	'for' 'provider' name=FQN
	'{'
		('use' use+=[FDRootElement|FQN])*

		// the own properties of this interface provider
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
		
		// instances of interfaces
		instances+=FDInterfaceInstance*
	'}';

FDInterfaceInstance:
	'instance' target=[fidl::FInterface|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
	'}';

FDTypes:
	'define' spec=[FDSpecification|FQN]
	'for' 'typeCollection' target=[fidl::FTypeCollection|FQN]
	('as' name=FQN)?
	'{'
		('use' use+=[FDRootElement|FQN])*
		
		// the own properties of this typeCollection
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?

		// properties for all type definitions in the package		
		types+=FDTypeDef*
	'}';

FDInterface:
	'define' spec=[FDSpecification|FQN]
	'for' 'interface' target=[fidl::FInterface|FQN]
	('as' name=FQN)?
	'{'
		('use' use+=[FDRootElement|FQN])*

		// the own properties of this interface
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
		
		// properties for the interface's elements
		attributes+=FDAttribute*		
		methods+=FDMethod*		
		broadcasts+=FDBroadcast*
		types+=FDTypeDef*
	'}';

FDAttribute:
	'attribute' target=[fidl::FAttribute|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
	'}';

FDMethod:
	'method' target=[fidl::FMethod|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
		('in' inArguments=FDArgumentList)?
		('out' outArguments=FDArgumentList)?
	'}';

FDBroadcast:
	'broadcast' target=[fidl::FBroadcast|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
		('out' outArguments=FDArgumentList)?
	'}';

FDArgumentList:
	{FDArgumentList}
	'{' arguments+=FDArgument* '}';

FDArgument:
	target=[fidl::FArgument|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
	'}';


FDTypeDef: FDArray | FDCompound | FDEnumeration;
FDCompound: FDStruct | FDUnion;

FDArray:
	'array' target=[fidl::FArrayType|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
	'}';

FDStruct:
	'struct' target=[fidl::FStructType|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
		fields+=FDField*
	'}';

FDUnion:
	'union' target=[fidl::FUnionType|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
		fields+=FDField*
	'}';

FDField:
	target=[fidl::FField|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
	'}';

FDEnumeration:
	'enumeration' target=[fidl::FEnumerationType|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
		enumerators+=FDEnumValue*
	'}';

FDEnumValue:
	target=[fidl::FEnumerator|FQN] '{'
		(properties+=FDProperty ((',')? properties+=FDProperty)*)?
	'}';


// **************************************************************
// property definition 

FDProperty:
	decl=[FDPropertyDecl|ID] '=' value=FDComplexValue;

FDComplexValue:
	single=FDValue | array=FDValueArray;

FDValueArray:
	'{' values+=FDValue (',' values+=FDValue)* '}';
	
FDValue:
	FDInteger | FDString | FDEnum | FDBoolean | FDInterfaceRef;
	
FDInteger:	    value=INT;
FDString:	    value=STRING;
FDEnum:         value=[FDEnumerator|ID];
FDBoolean:      value=('false'|'true');
FDInterfaceRef: '&' value=[fidl::FInterface|FQN];


// **************************************************************
// general

FQN:
	ID ('.' ID)*;


// **************************************************************
	